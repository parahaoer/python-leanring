参考链接：https://www.cnblogs.com/cotyb/p/5260032.html
  生成器是一个特殊的程序，可以被用作控制循环的迭代行为
  生成器类似于返回值为数组的一个函数，这个函数可以接收参数，可以被调用，但是，不同于一般的函数会一次性返回包含了所有数值的数组，生成器一次只产生一个值，
  这样消耗的内存数量大大减少，而且允许调用函数可以很快的开始处理前几个返回值。因此，生成器看起来像一个函数但是表现的却像一个迭代器。
  生成器函数：也是用def来定义，利用关键字yield一次返回一个结果，阻塞，重新开始
  一般的函数在执行完毕之后会返回一个值然后退出，但是生成器函数会自动挂起，然后重新拾起继续执行，他会利用yield关键字关起函数，给调用者返回一个值，同时保留
了当前的足够多的状态，可以使函数继续执行。
  可迭代的对象都有一个__next()__成员方法,这个方法要么返回迭代的下一项，要么引起异常结束迭代。
  拥有yield语句的函数被编译为生成器，这类函数被调用时返回一个生成器对象，返回的对象支持迭代接口，即成员方法__next()__继续从中断处执行执行
栗子：
def create_counter(n):
    print("create counter")
    while True:
        #在create_counter函数中出现了关键字yield，预示着这个函数每次只产生一个结果值，这个函数返回一个生成器（通过第一行输出可以看出来），用来产生
        #连续的n值
        yield n
        print('increment n')
        n += 1

cnt = create_counter(2)
#在创造生成器实例的时候，只需要像普通函数一样调用就可以，但是这个调用却不会执行这个函数，这个可以通过输出看出来
print(cnt)
#输出：<generator object create_counter at 0x7ff214c0f518>

#调用next(cnt)函数
print(next(cnt))
#输出：
create counter
2
#next()函数将生成器对象作为自己的参数，在第一次调用的时候，他执行了create_counter()函数到yield语句，返回产生的值2

#再次调用next(cnt)函数
print(next(cnt))
#输出：
increment n
3
#我们重复的调用next（）函数，每次他都会从上次被挂起的地方开始执行，直到再次遇到了yield关键字

栗子2:
def cube(n):
    for i in range(n):
        yield i ** 3

for i in cube(5):
    print i

#output
0
1
8
27
64
#所以从理解函数的角度出发我们可以将yield类比为return，但是功能确实完全不同，在for循环中，会自动遵循迭代规则，每次调用next()函数，所以上面的结果不难
理解。
